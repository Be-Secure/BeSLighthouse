import React, { useState } from "react";

import {
  Stack,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
  TableSortLabel,
  Typography
} from "@mui/material";

const TABLE_HEAD = [
  { id: "id", label: "ID", alignRight: false },
  { id: "Package", label: "Packages", alignRight: false },
  { id: "Summary", label: "Summary", alignRight: false },
  { id: "Affected Version", label: "Affected Version", alignRight: false },
  { id: "Fix", label: "Fix", alignRight: false }
];

function packageData(affected: any) {
  const affectedPackage: any = [];
  const affectedData: any[] = Object.values(affected);
  affectedData.forEach((value: any) => {
    affectedPackage.push(
      <>
        <li>{`${value.package.ecosystem}/${value.package.name}`}</li>
      </>
    );
  });
  return <ul>{affectedPackage}</ul>;
}

export default function VulnerabilityTable({ data }: any) {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(15);

  const filteredCve = data;

  const handleChangePage = (
    event: any,
    newPage: React.SetStateAction<number>
  ) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage: any = (event: {
    target: { value: string };
  }) => {
    setPage(0);
    setRowsPerPage(parseInt(event.target.value, 10));
  };

  return (
    <>
      <TableContainer>
        <Table>
          <TableHead sx={{ display: "contents" }}>
            <TableRow>
              {TABLE_HEAD.map((headCell: any) => (
                <TableCell
                  sx={{ color: "#637381", backgroundColor: "#F4F6F8" }}
                  key={headCell.id}
                  align={headCell.alignRight ? "right" : "left"}
                >
                  <TableSortLabel
                    hideSortIcon
                    style={{ position: "relative", minWidth: (headCell.id === 'id') ? '210px' : '134px'}}
                  >
                    {headCell.label}
                  </TableSortLabel>
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredCve
              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map((row: any, index: number) => {
                return (
                  <TableRow hover key={index} tabIndex={-1}>
                    <TableCell component="th" scope="row" padding="none">
                      <Stack direction="row" alignItems="center" spacing={2}>
                        <Typography
                          sx={{
                            position: "relative",
                            left: "16px"
                          }}
                          variant="subtitle2"
                          noWrap
                        >
                          <a
                        href={`/BeSLighthouse/vulnerability_report/:${row.cve_id}`}
                      >
                        {row.cve_id}
                      </a>
                        </Typography>
                      </Stack>
                    </TableCell>
                    <TableCell align="left">
                      {packageData(row.affected)}
                    </TableCell>
                    <TableCell align="left">{row.summary}</TableCell>
                    <TableCell align="left">
                      {row.affected[0].ranges[0].events.introduced} ...
                    </TableCell>
                    <TableCell align="left">Fix available</TableCell>
                  </TableRow>
                );
              })}
          </TableBody>
        </Table>
        <TablePagination
          sx={{
            ".MuiTablePagination-selectLabel": {
              margin: "auto"
            },
            ".MuiTablePagination-displayedRows": {
              margin: "auto"
            }
          }}
          rowsPerPageOptions={[15, 30, 45]}
          component="div"
          count={data.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </TableContainer>
    </>
  );
}
