import React, { useState } from "react";
import SearchVoiList from "../VoiTable/SearchVoiList";
import VulnerabilityTable from "../VoiTable/VulnerabilityTable";
import { ecoSystem, filterCheck } from "../filter/references";
import { applySortFilter, getComparator } from "../../../utils/sortFilter";

function filterDataBasedOnUserSelecrtionOnEcoSystem(
  ecoSystemName: string,
  getVoiLIST: any[]
): any {
  const regex = /^([^:]+)/gm;
  const filteredArray = getVoiLIST.filter((obj) => {
    return obj.affected.some(
      (item: { package: { ecosystem: { match: (arg0: RegExp) => string[]; }; }; }) => {
        return item.package.ecosystem.match(regex)[0] === ecoSystemName;
      }
    );
  }
  );
  return filteredArray;
}

export default function VulnerablitiDisplay({ report, selectedFilter }: any) {
  const [filterName, setFilterName] = useState("");
  const handleFilterByName = (event: any) => {
    setFilterName(event.target.value);
  };

  let getVoiLIST: any = report;

  if (selectedFilter?.EcoSystem && !filterCheck[selectedFilter?.EcoSystem]) {
    getVoiLIST = filterDataBasedOnUserSelecrtionOnEcoSystem(
      ecoSystem[selectedFilter?.EcoSystem],
      getVoiLIST
    );
  }

  if (selectedFilter?.Fix === "No Fix Available") {
    getVoiLIST = [];
  }

  const filteredCveReport = applySortFilter(
    getVoiLIST,
    getComparator("desc", "id"),
    filterName
  );

  return (
    <>
      <SearchVoiList
        placeholderName="Package or ID search"
        filterName={ filterName }
        onFilterName={ handleFilterByName }
      />
      <VulnerabilityTable data={ filteredCveReport } />
    </>
  );
}
