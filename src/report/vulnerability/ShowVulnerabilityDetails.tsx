import React, { useState } from "react";
import SiteWrapper from "../../SiteWrapper";
import { useParams } from "react-router-dom";
import { Card, Container } from "@mui/material";
import { verifyLink } from "../../sections/AssessmentReport";
import { vulnerabilityOffInterest } from "../../data-store/dataStore";
import Page from "../../components/Page";

export const spanStyle: any = {
  fontSize: "1rem",
  fontWeight: 700,
  paddingRight: "13px",
};

function convertString(data: string[]) {
  let result = "";
  data.forEach((value, index) => {
    let space = index < data.length - 1 ? ", " : " ";
    result += value + space;
  });
  return result;
}

function referanceURL(urls: any) {
  let list: any = [];
  urls.forEach((data: any) => {
    let link = (
      <li>
        <a href={data.url} target="_blank" rel="noopener noreferrer">
          {data.url}
        </a>
      </li>
    );
    list.push(link);
  });
  return list;
}

function range(item: any) {
  let list: any = [];
  item.forEach((value: any) => {
    list.push(
      <div style={{ width: "auto", gridColumnEnd: "span 3" }}>
        <dl
          style={{
            display: "grid",
            gridTemplateColumns: "max-content minmax(0, auto)",
            gridRowGap: "5px",
            gap: "8px",
          }}
        >
          <dt>Type</dt>
          <dd>ECOSYSTEM</dd>
          <dt>Events</dt>
          <dd>
            <div
              style={{
                gap: "4px",
                display: "grid",
                margin: 0,
                gridTemplateColumns: "repeat(12, minmax(0, 1fr))",
              }}
            >
              <div style={{ width: "auto", gridColumnEnd: "span 3" }}>
                Introduced
              </div>
              <div
                style={{
                  fontFamily: "'Overpass Mono', monospace",
                  width: "auto",
                  gridColumnEnd: "span 9",
                  paddingLeft: "53px",
                }}
              >
                {value.events.introduced}
              </div>
              <div style={{ width: "auto", gridColumnEnd: "span 3" }}>
                Fixed
              </div>
              <div
                style={{
                  fontFamily: "'Overpass Mono', monospace",
                  width: "auto",
                  gridColumnEnd: "span 9",
                  paddingLeft: "53px",
                }}
              >
                {value.events.fixed}
              </div>
            </div>
          </dd>
        </dl>
      </div>
    );
  });
  return list;
}

function displayVersion(versions: any) {
  let list: any = [];
  Object.keys(versions).forEach((data: any, index: any) => {
    list.push(
      <div
        style={{
          fontFamily: "'Overpass Mono', monospace",
          width: "auto",
          gridColumnEnd: "span 9",
        }}
      >
        <h2
          style={{
            background: "none",
            fontFamily: '"Overpass Mono", monospace',
            paddingLeft: "0px",
            paddingTop: "14px",
            fontSize: "16px",
          }}
        >
          {" "}
          {data}
        </h2>
        <div
          style={{
            borderBottom: (index > 0) ? "1px dashed black" : '',
            display: "flex",
            overflow: "auto",
            flexWrap: "wrap",
            gap: "8px",
            paddingBottom: "12px",
          }}
        >
          {versions[data].map((version: any) => {
            let listVersionDiv: any = [];
            listVersionDiv.push(
              <div style={{ width: "100px", overflowWrap: "break-word" }}>
                {version}
              </div>
            );
            return listVersionDiv;
          })}
        </div>
      </div>
    );
  });
  return list;
}

function displayAffectedVersion(affected: any) {
  if (affected === null) return (<></>)
  return (
    <>
      <div
        style={{
          padding: "14px 14px 14px 25px",
          borderBottom: "1px dashed black",
          display: "grid",
          margin: 0,
          gridGap: "24px",
          gridTemplateColumns: "repeat(12, minmax(0, 1fr))",
        }}
      >
        <h3
          style={{
            fontFamily: "Overpass, sans-serif",
            fontWeight: "bold",
            width: "auto",
            gridColumnEnd: "span 3",
          }}
        >
          Affected Version
        </h3>
        {displayVersion(affected)}
      </div>
    </>
  );
}

function displayAffectedPackage(affected: any) {
  let list: any = [];
  // eslint-disable-next-line array-callback-return
  affected.map((value: any) => {
    const data = (
      <>
        <p style={{ fontSize: "20px", fontFamily: "Overpass Mono", paddingTop: '12px' }}>
          {`${value.package.ecosystem} / ${value.package.name}`}
        </p>
        <div
          style={{
            padding: "14px 14px 14px 25px",
            borderBottom: "1px dashed black",
            display: "grid",
            margin: 0,
            gridGap: "24px",
            gridTemplateColumns: "repeat(12, minmax(0, 1fr))",
          }}
        >
          <h3
            style={{
              fontFamily: "Overpass, sans-serif",
              fontWeight: "bold",
              width: "auto",
              gridColumnEnd: "span 3",
            }}
          >
            Affected ranges
          </h3>
          {range(value.ranges)}
        </div>
        {displayAffectedVersion(value.versions)}
      </>
    );
    list.push(data);
  });

  return list;
}

function besID(id: any) {
  if (id !== null) {
    return (
      <>
        <dt>BeS Tracking ID:</dt>
        <dd>
          <a
            href={`https://github.com/Be-Secure/Be-Secure/issues/${id}`}
            target="_blank"
            rel="noopener noreferrer"
          >
            {`https://github.com/Be-Secure/Be-Secure/issues/${id}`}
          </a>
        </dd>
      </>
    );
  }
}

function aliases(list: any) {
  if (list.length !== 0) {
    return (
      <>
        <dt>Aliases:</dt>
        <dd>{convertString(list)}</dd>
      </>
    );
  }
}

function affectedProject(list: any) {
  if (list.length !== 0) {
    return (
      <>
        <dt>Affected Project:</dt>
        <dd>{convertString(list)}</dd>
      </>
    );
  }
}

function referanceLink(list: any) {
  if (list.length !== 0) {
    return (
      <>
        <dt>Referance:</dt>
        <dd>
          <ul
            style={{
              padding: 0,
              display: "flex",
              flexDirection: "column",
              gap: "10px",
              overflowWrap: "break-word",
            }}
          >
            {referanceURL(list)}
          </ul>
        </dd>
      </>
    );
  }
}

function ShowVulnerabilityDetails() {
  const { cveId }: any = useParams();

  const [report, setreport]: any = useState([]);
  React.useEffect(() => {
    verifyLink(vulnerabilityOffInterest, setreport);
  }, []);
  const cve_Id = cveId.slice(1);
  return (
    <SiteWrapper>
      <Page.Content key={"pagekey"} title={`${cve_Id}`}>
        <Container style={{ padding: "0px", marginTop: "12px" }}>
          <Card style={{ padding: "15px" }}>
            {
              // eslint-disable-next-line array-callback-return
              report.map((value: any) => {
                if (value.cve_id === cve_Id) {
                  return (
                    <>
                      <dl
                        style={{
                          display: "grid",
                          gridTemplateColumns: "max-content minmax(0, auto)",
                          gap: "8px",
                          gridRowGap: "5px",
                        }}
                      >
                        {besID(value.id)}
                        {aliases(value.aliases)}
                        <dt>BeS Technology Stack:</dt>
                        <dd>{value.bes_technology_stack}</dd>
                        <dt>Published:</dt>
                        <dd>{value.published}</dd>
                        <dt>Modified:</dt>
                        <dd>{value.modified}</dd>
                        <dt>Details:</dt>
                        <dd>{value.details}</dd>
                        {affectedProject(value.oss_projects)}
                        {referanceLink(value.references)}
                      </dl>
                      <div style={{ marginTop: "50px" }}>
                        <h2>Affected packages</h2>

                        <div
                          style={{
                            borderTop: "1px dashed black",
                            padding: "24px",
                          }}
                        >
                          {displayAffectedPackage(value.affected)}
                        </div>
                      </div>
                    </>
                  );
                }
              })
            }
          </Card>
        </Container>
      </Page.Content>
    </SiteWrapper>
  );
}

export default ShowVulnerabilityDetails;
